#!/bin/sh
#
# chkconfig: 345 90 10
# description: Granite Cloud Scheduler Broker
#
# pidfile: /var/run/granite/granite.pid
#
### BEGIN INIT INFO
# Provides:          granite.pl
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: granite daemon management
# Description:       Start granite to provide resource management broker
### END INIT INFO

#PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=granite
DESC="$NAME daemon"
USER=granite
GROUP=granite
WORKDIR=/home/clustervision/granite
PIDDIR=/var/run/granite
PIDFILE=$PIDDIR/$NAME.pid

test -f $DAEMON || exit 0

if [ -f /etc/default/granited ];then
  . /etc/default/granited
fi

if [ -f /lib/lsb/init-functions ] ; then
  . /lib/lsb/init-functions
fi

[ -z "$DAEMON" ] && { DAEMON=$WORKDIR/script/granited; }
[ -z "$GRANITE_CONFIG" ] && { export GRANITE_CONFIG=$WORKDIR/conf/granite.conf; }

export GRANITE_DISABLE_SSL=$GRANITE_DISABLE_SSL
export GRANITE_FOREGROUND=0

check_pid(){
    MYPID=`cat $PIDFILE`
    ps aux | awk {'print $2'} | grep -r -q "\b$MYPID\b";
    if [ $? -gt 0 ];then
       echo "Pidfile exists but $NAME not running"
       exit 1
    else
       echo "$NAME is running with pid $MYPID"
       STATUS=0
    fi
}

case "$1" in
    status)
        start-stop-daemon --pidfile $PIDFILE -c $USER:$GROUP \
            -d $WORKDIR --status $NAME
        rc=$?
        if [ $rc -eq 0 ]; then
            check_pid
        elif [ $rc -ne 0 ]; then
            echo "$NAME is stopped"
            STATUS=3
        else
            echo "$NAME status is unknown"
            STATUS=4
        fi
    ;;
    start)
        SCRIPT=${DAEMON##*/}
        `service $SCRIPT status | grep -q "is running with pid"`
        [ $? -eq 0 ] && { echo "Already started"; exit 1; }
        echo -n "Starting $DESC: "
        start-stop-daemon --start --quiet --pidfile $PIDFILE \
            --startas $DAEMON -d $WORKDIR -c $USER:$GROUP
        STATUS=$?
        log_end_msg $STATUS
        [ $STATUS -ne 0 -a -n "$ERROR" ] && { echo "$ERROR"; exit $STATUS; }
    ;;
    stop)
        echo -n "Stopping $DESC: "
        # --quiet
        start-stop-daemon --stop --signal INT --pidfile $PIDFILE \
            --startas $DAEMON
        STATUS=$?
        if [ -f /var/run/$NAME.pid ];then
            rm -f /var/run/$NAME.pid
        fi
        log_end_msg $STATUS
        [ $STATUS -ne 0 -a -n "$ERROR" ] && { echo "$ERROR"; exit $STATUS; }
    ;;
    restart|force-reload)
        echo -n "Stopping $DESC: "
        start-stop-daemon --stop --quiet --pidfile $PIDFILE \
            --exec /usr/bin/perl --startas $DAEMON
        STATUS=$?
        log_end_msg $STATUS
        [ $STATUS -ne 0 -a -n "$ERROR" ] && { echo "$ERROR"; exit $STATUS; }
        if [ -f /var/run/$NAME.pid ];then
            rm -f /var/run/$NAME.pid
        fi
        sleep 1
        echo -n "Starting $DESC: "
        start-stop-daemon --start --quiet --pidfile $PIDFILE \
            --exec /usr/bin/perl --startas $DAEMON -d $WORKDIR -c $USER:$GROUP
        STATUS=$?
        log_end_msg $STATUS
        [ $STATUS -ne 0 -a -n "$ERROR" ] && { echo "$ERROR"; exit $STATUS; }
    ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {status|start|stop|restart|force-reload}" >&2
        exit 1
    ;;
esac

exit 0
